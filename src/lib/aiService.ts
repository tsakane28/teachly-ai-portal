
import { getStudentWeakAreas, getUserAttempts, getQuestions, getCourses, getStudentRecommendations, getTeacherInsights } from './dataService';

// Simulate AI integration with Deep Infra API
export const analyzeStudentPerformance = async (userId: string) => {
  // In a real implementation, we would call the Deep Infra API
  // For this demo, we'll use our dataService functions to simulate AI analysis
  
  try {
    // Get the student's weak areas
    const weakAreas = getStudentWeakAreas(userId);
    
    // Get personalized recommendations
    const recommendations = getStudentRecommendations(userId);
    
    // Additional personalized insights based on performance patterns
    const attempts = getUserAttempts(userId);
    const courses = getCourses();
    
    // Calculate time patterns (when student performs best)
    const timePerformance: Record<string, { correct: number, total: number }> = {};
    attempts.forEach(attempt => {
      const hour = new Date(attempt.timestamp).getHours();
      const timeOfDay = hour < 12 ? 'morning' : hour < 18 ? 'afternoon' : 'evening';
      
      if (!timePerformance[timeOfDay]) {
        timePerformance[timeOfDay] = { correct: 0, total: 0 };
      }
      
      timePerformance[timeOfDay].total += 1;
      if (attempt.isCorrect) {
        timePerformance[timeOfDay].correct += 1;
      }
    });
    
    // Determine best time of day for studying
    let bestTimeOfDay = 'No data available';
    let bestPerformance = 0;
    
    Object.entries(timePerformance).forEach(([timeOfDay, stats]) => {
      const performance = stats.total > 0 ? (stats.correct / stats.total) * 100 : 0;
      if (performance > bestPerformance) {
        bestPerformance = performance;
        bestTimeOfDay = timeOfDay;
      }
    });
    
    return {
      weakAreas,
      recommendations,
      bestStudyTime: attempts.length > 5 ? bestTimeOfDay : 'Not enough data',
      totalCoursesAvailable: courses.length,
      coursesStarted: new Set(attempts.map(a => a.courseId)).size,
      performanceInsights: attempts.length > 0 ? [
        "Your performance improves with repeated attempts on the same topics.",
        `You tend to perform better during the ${bestTimeOfDay}.`,
        "You're making consistent progress."
      ] : ["Start taking quizzes to get AI-powered insights."]
    };
    
  } catch (error) {
    console.error("AI analysis error:", error);
    return {
      error: "Failed to analyze performance data",
      recommendations: ["Continue practicing to generate more data for analysis."]
    };
  }
};

export const generateTeacherInsights = async (teacherId: string) => {
  // In a real implementation, this would call the Deep Infra API
  try {
    const insights = getTeacherInsights(teacherId);
    
    // Additional insights that would be generated by AI
    return {
      ...insights,
      teachingStrategies: [
        "Interactive quizzes improve student engagement by 30%.",
        "Breaking complex topics into smaller chunks enhances retention.",
        "Regular knowledge checks throughout the course material increase completion rates."
      ],
      contentSuggestions: [
        "Consider adding more visual content to explain complex concepts.",
        "Short video explanations alongside text can improve comprehension.",
        "Create practice exercises with immediate feedback for better learning outcomes."
      ]
    };
  } catch (error) {
    console.error("AI teacher insights error:", error);
    return {
      error: "Failed to generate teaching insights",
      recommendations: ["Add more courses and questions to get better insights."]
    };
  }
};

export const getAdminAIOverview = async () => {
  // Simulated AI overview for admin
  try {
    const courses = getCourses();
    const allQuestions = getQuestions();
    
    return {
      platformInsights: [
        `There are currently ${courses.length} courses available on the platform.`,
        `A total of ${allQuestions.length} questions have been created.`,
        "Student engagement continues to grow week over week."
      ],
      recommendations: [
        "Encourage teachers to create more interactive course content.",
        "Consider adding more variety in question types beyond MCQs.",
        "Prompt students to complete their profiles for better personalization."
      ],
      performanceTrends: {
        studentGrowth: "+15% this month",
        courseCompletion: "72% average completion rate",
        teacherActivity: "8 active teachers this week"
      }
    };
  } catch (error) {
    console.error("AI admin overview error:", error);
    return {
      error: "Failed to generate platform overview",
      recommendations: ["Continue growing the platform with more courses and users."]
    };
  }
};
